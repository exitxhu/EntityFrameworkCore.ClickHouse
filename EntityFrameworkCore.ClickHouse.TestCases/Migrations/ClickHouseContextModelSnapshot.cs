// <auto-generated />
using System;
using ClickHouse.EntityFrameworkCore.Metadata;
using EntityFrameworkCore.ClickHouse.TestCases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkCore.ClickHouse.TestCases.Migrations
{
    [DbContext(typeof(ClickHouseContext))]
    partial class ClickHouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int32");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("String");

                    b.HasKey("LinkId");

                    b.ToTable("Links", (string)null);

                    b
                        .HasAnnotation("ClickHouseTableAttribute", "CREATE_OR_REPLACE")
                        .HasAnnotation("PostgreSQLEngine_ClickHouse:Engine", "{\"EngineType\":\"PostgreSQLEngine_ClickHouse:Engine\",\"Table\":\"Media\",\"Schema\":\"Media\"}");
                });

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int32");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("String");

                    b.HasKey("MediaId");

                    b.ToTable("Media", (string)null);

                    b.HasAnnotation("ClickHouseTableAttribute", "CREATE_OR_REPLACE");
                });

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int64");

                    b.Property<int?>("LinkId")
                        .HasColumnType("Int32");

                    b.Property<int?>("MediaId")
                        .HasColumnType("Int32");

                    b.Property<int?>("WebStoreId")
                        .HasColumnType("Int32");

                    b.HasKey("OrderId");

                    b.ToTable("Order", (string)null);

                    b
                        .HasAnnotation("ClickHouseTableAttribute", "CREATE_OR_REPLACE")
                        .HasAnnotation("PostgreSQLEngine_ClickHouse:Engine", "{\"EngineType\":\"PostgreSQLEngine_ClickHouse:Engine\",\"Table\":\"Order\",\"Schema\":\"Order\"}");
                });

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.WebStore", b =>
                {
                    b.Property<int>("WebStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int32");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<string>("AlternativeUrl")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DateTime");

                    b.Property<int?>("DependingWebStoreId")
                        .HasColumnType("Int32");

                    b.Property<DateTime>("RecheckFromDate")
                        .HasColumnType("DateTime");

                    b.Property<string[]>("RecheckHeaders")
                        .IsRequired()
                        .HasColumnType("Array(String)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("String");

                    b.HasKey("WebStoreId");

                    b.ToTable("WebStore", (string)null);

                    b
                        .HasAnnotation("ClickHouseTableAttribute", "CREATE_OR_REPLACE")
                        .HasAnnotation("PostgreSQLEngine_ClickHouse:Engine", "{\"EngineType\":\"PostgreSQLEngine_ClickHouse:Engine\",\"Table\":\"WebStore\",\"Schema\":\"WebStore\"}");
                });

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.Order", b =>
                {
                    b.HasOne("EntityFrameworkCore.ClickHouse.TestCases.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.ClickHouse.TestCases.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .IsRequired();

                    b.HasOne("EntityFrameworkCore.ClickHouse.TestCases.WebStore", "WebStore")
                        .WithMany()
                        .HasForeignKey("WebStoreId")
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Media");

                    b.Navigation("WebStore");
                });

            modelBuilder.Entity("EntityFrameworkCore.ClickHouse.TestCases.WebStore", b =>
                {
                    b.HasOne("EntityFrameworkCore.ClickHouse.TestCases.WebStore", "DependingWebStore")
                        .WithMany()
                        .HasForeignKey("DependingWebStoreId")
                        .IsRequired();

                    b.Navigation("DependingWebStore");
                });
#pragma warning restore 612, 618
        }
    }
}
